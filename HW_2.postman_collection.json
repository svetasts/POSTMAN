{
	"info": {
		"_postman_id": "4ebccd65-45f4-49e7-8e0b-ccb62031a5c0",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19949357"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Проверить, что в body приходит правильный string",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"This is the first responce from server!ss\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text",
							"disabled": true
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Sveta",
							"type": "text",
							"disabled": true
						},
						{
							"key": "auth_token",
							"value": "/s34lfgbj/Sveta/jjd909/20098kjkWpqc2678371fg243691evny",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json",
							" let jsonData = pm.response.json();",
							"",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)",
							"pm.test(\"name\", function () {",
							"    pm.expect(jsonData.name).to.eql(\"Sveta\");",
							"});",
							"//Проверить, что age в ответе равно age s request",
							"pm.test(\"age\", function () {",
							"    pm.expect(jsonData.age).to.eql(\"37\");",
							"});",
							"//Проверить, что salary в ответе равно salary s request ",
							"pm.test(\"salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(5000);",
							"});",
							"",
							"//Спарсить request",
							"let req = request.data;",
							"console.log(\"req\", req)",
							"",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"age\", function () {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"salary\", function () {",
							"    pm.expect(jsonData.salary).to.eql(req.salary * 1);",
							"});",
							"",
							"//Вывести в консоль параметр family из response.",
							"console.log(\"family\", jsonData.family)",
							"",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)",
							"pm.test(\"salary_1_5\", function() {",
							"    pm.expect(jsonData.family.u_salary_1_5_year).to.eql(req.salary * 4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "37",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Sveta",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"//Спарсить request",
							"let req = pm.request.url.query.toObject();",
							"console.log(jsonData.salary);",
							"console.log(req.salary)",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check responce name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)",
							"pm.test(\"Ckeck responce age\", function() {",
							"    pm.expect(jsonData.age).to.eql(req.age);",
							"});",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)",
							"pm.test(\"Check  salary\", function() {",
							"  pm.expect(jsonData.salary).to.eql(req.salary * 1)",
							"",
							"});",
							"",
							"//Вывести в консоль параметр family из response.",
							"console.log(\"family\", jsonData.family);",
							"",
							"//Проверить, что у параметра dog есть параметры name.",
							"pm.test(\"Check dog\", function() {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");",
							"});",
							"// Проверить, что у параметра dog есть параметры age.",
							"pm.test(\"Check dog\", function() {",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");",
							"}",
							");",
							"//Проверить, что параметр name имеет значение Luky.",
							"pm.test(\"Check name Luky\", function () {",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");",
							"});",
							"//Проверить, что параметр age имеет значение 4.",
							"pm.test(\"Check age\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Sveta&age=37&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"//Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"",
							"//Спарсить request.",
							"let req = pm.request.url.query.toObject();",
							"console.log(\"req\", req)",
							"// Проверить, что name в ответе равно name s request (name забрать из request.)",
							"pm.test(\"Check name\", function () {",
							"    pm.expect(jsonData.name).to.eql(req.name);",
							"});",
							"//Проверить, что age в ответе равно age из request (age забрать из request.)",
							"pm.test(\"Check age\", function () {",
							"    pm.expect(jsonData.age).to.eql(+ req.age);",
							"});",
							"//Вывести в консоль параметр salary из request.",
							"console.log(req.salary)",
							"//Вывести в консоль параметр salary из response.",
							"console.log(jsonData.salary)",
							"// Вывести в консоль 0-й элемент параметра salary из response.",
							"let salary_1 = jsonData.salary[0];",
							"console.log(salary_1)",
							"// Вывести в консоль 1-й элемент параметра salary параметр salary из response.",
							"let salary_2 = jsonData.salary[1];",
							"console.log(salary_2)",
							"// Вывести в консоль 2-й элемент параметра salary параметр salary из response.",
							"let salary_3 = jsonData.salary[2];",
							"console.log(salary_3)",
							"// Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)",
							"",
							"pm.test(\"Check salary_1\", function () {",
							"    pm.expect(salary_1).to.eql(req.salary * 1);",
							"});",
							"// Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check salary_2\", function () {",
							"    pm.expect(salary_2 * 1).to.eql(req.salary * 2);",
							"});",
							"//. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)",
							"pm.test(\"Check salary_3\", function () {",
							"    pm.expect(salary_3 * 1).to.eql(req.salary * 3);",
							"});",
							"",
							"// Передать в окружение переменную name",
							"pm.environment.set(\"name\", \"Sveta\");",
							"// Передать в окружение переменную age",
							"pm.environment.set(\"age\", \"37\");",
							"// Передать в окружение переменную salary",
							"pm.environment.set(\"salary_1\", jsonData.salary[0]);",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"for (a in jsonData.salary) {",
							"    console.log(\"salary_cycle:\", jsonData.salary[a]);",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?age=37&name=Sveta&salary=5000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "age",
							"value": "37"
						},
						{
							"key": "name",
							"value": "Sveta"
						},
						{
							"key": "salary",
							"value": "5000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"//Вставить параметр salary из окружения в request",
							"// Вставить параметр age из окружения в age",
							"// Вставить параметр name из окружения в name",
							"// Отправить запрос.",
							"//Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"// Спарсить response body в json.",
							"let jsonData = pm.response.json();",
							"// Спарсить request.",
							"let req = request.data;",
							"",
							"// Проверить, что json response имеет параметр start_qa_salary",
							"pm.test(\"Json responce has start_qa_salary\", function (){",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months",
							"pm.test(\"Json responce has qa_salary_after_6_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");",
							"});",
							"// Проверить, что json response имеет параметр qa_salary_after_12_months",
							"pm.test(\"Json responce has qa_salary_after_12_months\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");",
							"});",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year",
							"pm.test(\"Json responce has qa_salary_after_1.5_years\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");",
							"});",
							"// Проверить, что json response имеет параметр qa_salary_after_3.5_years",
							"pm.test(\"Json responce has qa_salary_after_3.5_years\", function () {",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");",
							"});",
							"// Проверить, что json response имеет параметр person",
							"pm.test(\"Check json responce has person\", function () {",
							"    pm.expect(jsonData).to.have.property(\"person\");",
							"});",
							"// Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)",
							"pm.test(\"Check start_qa_salary = salary from request\", function () {",
							"    pm.expect(jsonData.start_qa_salary).to.eql(req.salary * 1);",
							"});",
							"// Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_6_months = salary*2 from request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(req.salary * 2);",
							"});",
							"// Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_12_months = salary*2.7 from request\", function () {",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(req.salary * 2.7);",
							"});",
							"// Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_1.5_year = salary*3.3 from request\", function () {",
							"  pm.expect(jsonData['qa_salary_after_1.5_year']).to.eql(req.salary * 3.3);",
							"});",
							"// Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)",
							"pm.test(\"Check qa_salary_after_3.5_years = salary*3.8 from request\", function () {",
							"    pm.expect(jsonData['qa_salary_after_3.5_years']).to.eql(req.salary * 3.8);",
							"});",
							"",
							"// // Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)",
							"pm.test(\"Ckeck u_name = salary from request\", function () {",
							"     pm.expect(jsonData.person.u_name[1]).to.eql(req.salary * 1);",
							" });",
							"// //20. Проверить, что что параметр u_age равен age из request (age забрать из request.)",
							"pm.test(\"Check u_age = age from request\", function () {",
							"     pm.expect(jsonData.person.u_age).to.eql(+req.age);",
							" });",
							"// //21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)",
							"pm.test(\"Ckeck u_salary_5_years = salary*4.2 from request\", function () {",
							"     pm.expect(jsonData.person.u_salary_5_years).to.eql(req.salary * 4.2);",
							"});",
							"// //22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (b in jsonData.person) {",
							"     console.log(\"person_cycle:\", jsonData.person[b]);",
							" };",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}